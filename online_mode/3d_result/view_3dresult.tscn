[gd_scene load_steps=19 format=2]

[ext_resource path="res://resources/Game buttons/panel.png" type="Texture" id=1]
[ext_resource path="res://resources/Themes/ui_theme2.tres" type="Theme" id=2]
[ext_resource path="res://inventory_system/data/resources/settings_data.tres" type="Resource" id=3]
[ext_resource path="res://inventory_system/resources/sprites/main panel.png" type="Texture" id=4]
[ext_resource path="res://resources/Themes/levelresult_theme.tres" type="Theme" id=5]
[ext_resource path="res://resources/Themes/ui_theme1.tres" type="Theme" id=6]
[ext_resource path="res://resources/Themes/view_createdlevels.tres" type="Theme" id=7]
[ext_resource path="res://resources/Game buttons/question_panel.png" type="Texture" id=8]
[ext_resource path="res://resources/Themes/warning_font.tres" type="DynamicFont" id=9]
[ext_resource path="res://resources/Themes/user_profile_buttons.tres" type="Theme" id=10]
[ext_resource path="res://resources/Themes/export_excel.tres" type="Theme" id=11]
[ext_resource path="res://resources/font/button.tres" type="DynamicFont" id=12]
[ext_resource path="res://resources/Game buttons/simple_bg_worg _games(1).png" type="Texture" id=13]
[ext_resource path="res://resources/soundtrack/AudioLoopPlayer.tscn" type="PackedScene" id=14]
[ext_resource path="res://resources/soundtrack/menu/random silly chip song.ogg" type="AudioStream" id=15]

[sub_resource type="GDScript" id=1]
script/source = "extends Node2D

var http_request : HTTPRequest = HTTPRequest.new()
const SERVER_URL = \"https://nwork.slarenasitsolutions.com/authentication.php\"
const SERVER_HEADERS = [\"Content-Type: application/x-www-form-urlencoded\", \"Cache-Control: max-age=0\"]
var request_queue : Array = []
var is_requesting : bool = false
onready var grid_container = $ScrollContainer/GridContainer
var headers = []  # Initialize headers as an empty array
var header_display = []
export (Resource) var settings_data
onready var result = $result

func _ready():
	add_child(http_request)
	http_request.connect(\"request_completed\", self, \"_http_request_completed\")
	get_createlevels()
	
func _process(_delta):
	# Check if we have pending requests in the queue:
	if !request_queue.empty() and !is_requesting:
		var request = request_queue.pop_front()
		_send_request(request)
		
func _send_request(request : Dictionary):
	# Check if a request is already in progress
	if is_requesting:
		# If a request is already in progress, add the request to the queue
		request_queue.push_back(request)
		return

	is_requesting = true

	var client = HTTPClient.new()
	var data = client.query_string_from_dict({\"data\" : JSON.print(request['data'])})
	var body = \"command=\" + request['command'] + \"&\" + data

	# Make request to the server:
	var err = http_request.request(SERVER_URL, SERVER_HEADERS, false, HTTPClient.METHOD_POST, body)

	# Check if there were problems:
	if err != OK:
		printerr(\"HTTPRequest error: \" + String(err))
		return
		
func _http_request_completed(result, response_code, headers, body):
	is_requesting = false
	
	if result != HTTPRequest.RESULT_SUCCESS:
		printerr(\"Error with connection: \" + str(result))
		$message.text = \"No internet connection\"
		return
	
	var response_body = body.get_string_from_utf8()
	var response = parse_json(response_body)
	print(response)
	
	if response is Array:
		if response.size() > 0:
			var data = response  # The response is an array of dictionaries
			headers = data[0].keys()
			display_table(data)
		else:
			print(\"JSON data is empty\")
			$message.text = \"No 3d levels created\"
	else:
		print(\"Invalid JSON response\")
		$message.text = \"No 3d levels created\"
		
	
func display_table(data):
	# Define your headers manually
	headers = [\"filename\", \"level_name\"]
	# Invert the sorted array to achieve descending order
	header_display = [\"Level Code\", \"Level Name\"]
	data.invert()
	# Clear the existing grid contents
	clear_grid()

	var font_resource = load(\"res://resources/font/login_signup_font.tres\")
	var font_color = Color(0, 0, 0, 1)
	for j in range(headers.size()):
		var header_label = Label.new()
		header_label.text = header_display[j]
		header_label.rect_min_size = Vector2(550, 30)  # Set the size here
		header_label.add_font_override(\"font\", font_resource)
		header_label.add_color_override(\"font_color\", font_color)
		grid_container.add_child(header_label)
		header_label.align = Label.ALIGN_CENTER  # Center-align text

	# Create and add data cells to subsequent rows
	for i in range(data.size()):
		var row = data[i]
		for j in range(headers.size()):
			if headers[j] == \"filename\":
				var cell_button = Button.new()
				cell_button.text = str(row[headers[j]]).replace(\".tscn\", \"\")
				cell_button.rect_min_size = Vector2(200, 100)
				var custom_load_theme = load(\"res://resources/Themes/result_quiz.tres\")
				cell_button.theme = custom_load_theme
				cell_button.connect(\"pressed\", result, \"get_3dlevelresult\", [row[headers[j]]])
				grid_container.add_child(cell_button)
			else:
				var cell_label = Label.new()  # Create a label for other data
				cell_label.text = str(row[headers[j]])
				cell_label.add_font_override(\"font\", font_resource)
				cell_label.add_color_override(\"font_color\", font_color)
				grid_container.add_child(cell_label)
				cell_label.align = Label.ALIGN_CENTER  # Center-align text

func clear_grid():
	# Remove all child nodes from the grid_container
	while grid_container.get_child_count() > 0:
		var child = grid_container.get_child(0)
		grid_container.remove_child(child)
		child.queue_free()
	
func get_createlevels():
	var creator = settings_data.email
	var command = \"get_created3dlevels\"
	var data = {\"creator\": creator}
	print(data)
	request_queue.push_back({\"command\": command, \"data\": data})


func _on_exit_pressed():
	Load.load_scene(self, \"res://online_mode/level_create_Menu/level_create.tscn\")
"

[sub_resource type="GDScript" id=2]
script/source = "extends CanvasLayer
var http_request : HTTPRequest = HTTPRequest.new()
const SERVER_URL = \"https://nwork.slarenasitsolutions.com/authentication.php\"
const SERVER_HEADERS = [\"Content-Type: application/x-www-form-urlencoded\", \"Cache-Control: max-age=0\"]
var request_queue : Array = []
var is_requesting : bool = false
onready var grid_container = $ScrollContainer/GridContainer
var headers = []  # Initialize headers as an empty array
var headers_display = []
export (Resource) var settings_data
var response
var currentLevelName: String = \"\"
var responseData = []
var itsave = false

func _ready():
	add_child(http_request)
	http_request.connect(\"request_completed\", self, \"_http_request_completed\")
	
func _process(_delta):
	# Check if we have pending requests in the queue:
	if !request_queue.empty() and !is_requesting:
		var request = request_queue.pop_front()
		_send_request(request)
		
func _send_request(request : Dictionary):
	# Check if a request is already in progress
	if is_requesting:
		# If a request is already in progress, add the request to the queue
		request_queue.push_back(request)
		return

	is_requesting = true

	var client = HTTPClient.new()
	var data = client.query_string_from_dict({\"data\" : JSON.print(request['data'])})
	var body = \"command=\" + request['command'] + \"&\" + data

	# Make request to the server:
	var err = http_request.request(SERVER_URL, SERVER_HEADERS, false, HTTPClient.METHOD_POST, body)

	# Check if there were problems:
	if err != OK:
		printerr(\"HTTPRequest error: \" + String(err))
		return
		
func _http_request_completed(result, response_code, headers, body):
	is_requesting = false
	
	if result != HTTPRequest.RESULT_SUCCESS:
		printerr(\"Error with connection: \" + str(result))
		return
	var response_body = body.get_string_from_utf8()
		
	if response_body.empty():
		$export.disabled = true
		$ScrollContainer/GridContainer.visible = false
		$Label.text = \"No one completed yet.\"
		return
		
	response = parse_json(response_body)
	print(response)
	if response is Array:
		if response.size() > 0:
			var data = response  # The response is an array of dictionaries
			responseData = response 
			headers = data[0].keys()
			$ScrollContainer/GridContainer.visible = true
			$Label.text = \"\"
			display_table(data)
			$export.disabled = false

func display_table(data):
	# Define your headers manually
	headers = [\"username\", \"section\", \"scores\"]
	headers_display = [\"student name\", \"section\", \"remarks\"]
	# Clear the existing grid contents
	clear_grid()

	var font_resource = preload(\"res://resources/font/login_signup_font.tres\")
	var font_color = Color(0, 0, 0, 1)
	for j in range(headers.size()):
		var header_label = Label.new()
		header_label.text = headers_display[j]
		header_label.rect_min_size = Vector2(400, 30)  # Set the size here
		header_label.add_font_override(\"font\", font_resource)
		header_label.add_color_override(\"font_color\", font_color)
		grid_container.add_child(header_label)
		header_label.align = Label.ALIGN_CENTER  # Center-align text

	# Create and add data cells to subsequent rows
	for i in range(data.size()):
		var row = data[i]
		for j in range(headers.size()):
			if headers[j] == \"file_name\":  # Check if the header is \"email\"
				var cell_button = Button.new()  # Create a button for email addresses
				cell_button.text = str(row[headers[j]])  # Set the button text to the email address
			else:
				var cell_label = Label.new()  # Create a label for other data
				cell_label.text = str(row[headers[j]]).replace(\"\\\"\", \"\")
				cell_label.add_font_override(\"font\", font_resource)
				cell_label.add_color_override(\"font_color\", font_color)
				cell_label.rect_min_size = Vector2(200, 90)  # Set the size here
				grid_container.add_child(cell_label)
				cell_label.align = Label.ALIGN_CENTER  # Center-align text

func clear_grid():
	# Remove all child nodes from the grid_container
	while grid_container.get_child_count() > 0:
		var child = grid_container.get_child(0)
		grid_container.remove_child(child)
		child.queue_free()

func get_3dlevelresult(value):
	$\"../exit\".disabled = true
	var command = \"get_levelresult\"
	var levelname = value.replace(\".tscn\", \"\")
	currentLevelName = levelname
	var data = {\"level_name\": levelname}
	request_queue.push_back({\"command\": command, \"data\": data})
	$\".\".visible = true

func _on_back_pressed():
	$\".\".visible = false
	$\"../exit\".disabled = false


func _on_export_pressed():
	$\"../file_dialog_title\".visible = true
	$\"../file_dialog\".visible = true
	$\"../file_dialog/FileDialog\".popup()
	$\"../file_dialog/FileDialog\".mode = FileDialog.MODE_SAVE_FILE  # Corrected line
	$\"../file_dialog/FileDialog\".filters = [\"*.csv\"]
	# Connect the \"file_selected\" signal of the FileDialog to this function
	$\"../file_dialog/FileDialog\".connect(\"file_selected\", self, \"_on_SaveFileDialog_file_selected\")
# Connect the \"file_selected\" signal of the FileDialog to this function
func _on_SaveFileDialog_file_selected(path):
	if path.empty():
		return  # User canceled the dialog
	if not path.ends_with(\".csv\"):
	   path += \".csv\"
	
	# Perform the save operation here using the provided data
	export_csv_data(responseData, path)

# Modify your export_csv_data function to accept the path as an argument
func export_csv_data(data, path):
	var csv_data = \"Name, Section, Remarks\\n\"  # CSV header row
	for item in data:
		if item is Dictionary:
			var name = item.get(\"username\", \"\")
			var remarks = item.get(\"scores\", \"\")
			var section = item.get(\"section\", \"\")
			csv_data += '\"' + name + '\",' + '\"' + section + '\",' + '\"' + remarks + ',\"' + '\"\\n'
			

	# You can use responseData here to access the response data
	var file = File.new()
	if file.open(path, File.WRITE) == OK:
		file.store_string(csv_data)
		file.close()
		itsave = true
	else:
		print(\"Error saving CSV data\")


func _on_FileDialog_popup_hide():
	if itsave == true:
		$\"../message_prompt\".visible = true
		$\"../message_prompt/message\".text = \"The file was successfully saved\"
		$\"../file_dialog_title\".visible = false
		$\"../file_dialog\".visible = false
		itsave = false
	else:
		$\"../message_prompt\".visible = true
		$\"../message_prompt/message\".text = \"The operation was cancelled\"
		$\"../file_dialog_title\".visible = false
		$\"../file_dialog\".visible = false


func _on_FileDialog_custom_action(action):
	pass # Replace with function body.
"

[sub_resource type="GDScript" id=3]
script/source = "extends CanvasLayer


# Declare member variables here. Examples:
# var a = 2
# var b = \"text\"


# Called when the node enters the scene tree for the first time.
func _ready():
	pass # Replace with function body.


# Called every frame. 'delta' is the elapsed time since the previous frame.
#func _process(delta):
#	pass


func _on_Button_pressed():
	$\".\".visible = false
"

[node name="3d_levels" type="Node2D"]
script = SubResource( 1 )
settings_data = ExtResource( 3 )

[node name="TextureRect" type="TextureRect" parent="."]
margin_right = 40.0
margin_bottom = 40.0
texture = ExtResource( 13 )

[node name="backgrround" type="TextureRect" parent="."]
margin_left = 252.0
margin_top = 104.0
margin_right = 502.0
margin_bottom = 354.0
rect_scale = Vector2( 5.83849, 3.56068 )
texture = ExtResource( 1 )

[node name="exit" type="Button" parent="."]
margin_left = 8.0
margin_top = 7.0
margin_right = 305.0
margin_bottom = 139.0
theme = ExtResource( 5 )
text = "back"

[node name="message" type="Label" parent="."]
margin_left = 639.0
margin_top = 491.0
margin_right = 1295.0
margin_bottom = 533.0
theme = ExtResource( 2 )
align = 1
valign = 1
autowrap = true

[node name="ScrollContainer" type="ScrollContainer" parent="."]
margin_left = 425.0
margin_top = 138.0
margin_right = 1626.0
margin_bottom = 893.0
scroll_horizontal_enabled = false

[node name="GridContainer" type="GridContainer" parent="ScrollContainer"]
columns = 2

[node name="result" type="CanvasLayer" parent="."]
visible = false
script = SubResource( 2 )
settings_data = ExtResource( 3 )

[node name="TextureRect" type="TextureRect" parent="result"]
margin_left = 153.0
margin_top = 70.0
margin_right = 365.0
margin_bottom = 282.0
rect_scale = Vector2( 7.62559, 4.53639 )
texture = ExtResource( 4 )
stretch_mode = 5

[node name="ScrollContainer" type="ScrollContainer" parent="result"]
margin_left = 294.0
margin_top = 173.0
margin_right = 1617.0
margin_bottom = 928.0

[node name="GridContainer" type="GridContainer" parent="result/ScrollContainer"]
columns = 3

[node name="back" type="Button" parent="result"]
margin_left = 153.0
margin_top = 15.0
margin_right = 305.0
margin_bottom = 147.0
focus_mode = 0
theme = ExtResource( 2 )
enabled_focus_mode = 0
text = "x"

[node name="Label" type="Label" parent="result"]
margin_left = 570.0
margin_top = 488.0
margin_right = 1352.0
margin_bottom = 578.0
custom_colors/font_color = Color( 0, 0, 0, 1 )
custom_fonts/font = ExtResource( 12 )
autowrap = true

[node name="export" type="Button" parent="result"]
margin_left = 1492.0
margin_top = 805.0
margin_right = 1642.0
margin_bottom = 955.0
theme = ExtResource( 11 )

[node name="file_dialog_title" type="CanvasLayer" parent="."]
visible = false

[node name="ColorRect" type="ColorRect" parent="file_dialog_title"]
margin_right = 1923.0
margin_bottom = 175.0
color = Color( 0, 0, 0, 1 )

[node name="ColorRect2" type="ColorRect" parent="file_dialog_title"]
margin_right = 1915.0
margin_bottom = 151.0
color = Color( 0, 0.576471, 1, 1 )

[node name="Label" type="Label" parent="file_dialog_title"]
anchor_left = 0.5
anchor_right = 0.5
margin_left = -560.0
margin_top = 42.0
margin_right = 560.0
margin_bottom = 110.0
theme = ExtResource( 6 )
text = "Save level"
align = 1
valign = 1
autowrap = true

[node name="file_dialog" type="CanvasLayer" parent="."]
visible = false

[node name="PanelContainer" type="PanelContainer" parent="file_dialog"]
margin_left = 10.0
margin_top = 197.0
margin_right = 1924.0
margin_bottom = 1092.0
theme = ExtResource( 6 )

[node name="FileDialog" type="FileDialog" parent="file_dialog"]
visible = true
anchor_left = 0.5
anchor_top = 1.0
anchor_right = 0.5
anchor_bottom = 1.0
margin_left = -927.0
margin_top = -838.0
margin_right = 927.0
rect_min_size = Vector2( 150, 52.5 )
theme = ExtResource( 7 )
access = 2

[node name="message_prompt" type="CanvasLayer" parent="."]
visible = false
script = SubResource( 3 )

[node name="TextureRect" type="TextureRect" parent="message_prompt"]
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
margin_left = -549.0
margin_top = -273.0
margin_right = -253.0
margin_bottom = -47.0
rect_scale = Vector2( 3.55848, 2.28905 )
texture = ExtResource( 8 )

[node name="Label" type="Label" parent="message_prompt"]
margin_left = 761.0
margin_top = 305.0
margin_right = 1096.0
margin_bottom = 395.0
custom_colors/font_color = Color( 0, 0, 0, 1 )
custom_fonts/font = ExtResource( 9 )
text = "Notice"

[node name="message" type="Label" parent="message_prompt"]
margin_left = 492.0
margin_top = 429.0
margin_right = 1409.0
margin_bottom = 651.0
theme = ExtResource( 6 )
custom_colors/font_color = Color( 0, 0, 0, 1 )
text = "The file was success save in "
align = 1
valign = 1
autowrap = true

[node name="Button" type="Button" parent="message_prompt"]
margin_left = 792.0
margin_top = 696.0
margin_right = 1048.0
margin_bottom = 771.0
theme = ExtResource( 10 )
text = "Confirm"

[node name="AudioLoopPlayer" parent="." instance=ExtResource( 14 )]
stream = ExtResource( 15 )
bus = "Music"

[connection signal="pressed" from="exit" to="." method="_on_exit_pressed"]
[connection signal="pressed" from="result/back" to="result" method="_on_back_pressed"]
[connection signal="pressed" from="result/export" to="result" method="_on_export_pressed"]
[connection signal="custom_action" from="file_dialog/FileDialog" to="result" method="_on_FileDialog_custom_action"]
[connection signal="popup_hide" from="file_dialog/FileDialog" to="result" method="_on_FileDialog_popup_hide"]
[connection signal="pressed" from="message_prompt/Button" to="message_prompt" method="_on_Button_pressed"]
